'''
Defines data models for: songs, playlists
'''
import copy


class Song(object):
    '''
    An object representing a song.

    Attrs:
    id: A unique id for the song, generated by the creator
    title: name of the song
    artist: main artist of the song
    album: album in which the song is found
    duration: length of the song in seconds
    '''

    def __init__(self, title, artist, album, duration):
        self.id = None
        self.title = title
        self.artist = artist
        self.album = album
        self.duration = duration

    def __iter__(self):
        return iter((self.id, self.title, self.artist, self.album, self.duration))

    def __dict__(self):
        song = {
            "id": self.id,
            "title": self.title,
            "artist": self.artist,
            "album": self.album,
            "duration": self.duration
        }
        return song

    def get(self):
        return self.__dict__()

    def copy(self):
        return copy.deepcopy(self)
    
    def set_id(self, song_id):
        self.id = song_id

    def id(self):
        return self.id


class Playlist(object):
    '''
    A base object for playlists of different kinds.

    Attrs:
    id: A unique id for the playlist, generated by the creator
    title: Name for the playlist
    descr: Description of the playlist
    creator: Creator of the playlists

    songs: List of songs in the playlists
    song_descr: Dict of descriptions for each song, indexed by id
    '''

    def __init__(self, title, creator, descr="", songs=[], song_descr={}):
        self.id = None
        self.title = title
        self.descr = descr
        self.creator = creator
        self.songs = songs
        self.song_descr = song_descr

        self.size = len(songs)

    def add_song(self, song_id, descr):
        self.songs.append(song_id)
        self.song_descr[song_id] = descr
        self.size += 1

    def del_song(self, song_id):
        if song_id in songs:
            song_index = songs.index(song_id)
            deleted_song = songs.pop(song_index)
            del song_descr[song_index]
            self.size -= 1
        else:
            raise ValueError("Song not found")

    def set_id(self, playlist_id):
        self.id = playlist_id

    def __iter__(self):
        return PlaylistIterator(self)

    def __next__(self):
        pass

class PlaylistIterator:
    '''
    Iterator for playlists
    '''
    def __init__(self, playlist):
        self.playlist = playlist
        self.index = 0
    
    def __next__(self):
        if self.index < self.playlist.size:
            self.index += 1
            return self.playlist.songs[self.index - 1]
        else:
            raise StopIteration()